version: '3.8'

services:

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - microservices-network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "user-created:1:1,user-deleted:1:1"
    depends_on:
      - zookeeper
    networks:
      - microservices-network


  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
    env_file:
      - .env
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/register"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
    env_file:
      - .env
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/get"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "6000:6000"
    environment:
      - PORT=6000
    env_file:
      - .env
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6000/get/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    ports:
      - "9000:9000"
    environment:
      - PORT=9000
    env_file:
      - .env
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/cart"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "7000:7000"
    environment:
      - PORT=7000
    env_file:
      - .env
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7000/order"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  microservices-network:
    driver: bridge